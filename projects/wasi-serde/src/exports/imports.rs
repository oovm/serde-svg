// Generated by `wit-bindgen` 0.24.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod exports {
  #[allow(dead_code)]
  pub mod wasi {
    #[allow(dead_code)]
    pub mod serde {
      #[allow(dead_code, clippy::all)]
      pub mod errors {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
        use super::super::super::super::_rt;
        #[derive(Clone)]
        pub struct CustomError {
          pub message: _rt::String,
        }
        impl ::core::fmt::Debug for CustomError {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("CustomError").field("message", &self.message).finish()
          }
        }
        #[derive(Clone)]
        pub enum SerializeError {
          Custom(CustomError),
        }
        impl ::core::fmt::Debug for SerializeError {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              SerializeError::Custom(e) => {
                f.debug_tuple("SerializeError::Custom").field(e).finish()
              }
            }
          }
        }
        impl ::core::fmt::Display for SerializeError {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            write!(f, "{:?}", self)
          }
        }

        impl std::error::Error for SerializeError {}
        #[doc(hidden)]

        macro_rules! __export_wasi_serde_errors_0_2_0_cabi{
          ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          };);
        }
        #[doc(hidden)]
        pub(crate) use __export_wasi_serde_errors_0_2_0_cabi;

      }

      #[allow(dead_code, clippy::all)]
      pub mod serialize {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
        use super::super::super::super::_rt;
        pub type SerializeError = super::super::super::super::exports::wasi::serde::errors::SerializeError;

        #[derive(Debug)]
        #[repr(transparent)]
        pub struct Serializer{
          handle: _rt::Resource<Serializer>,
        }

        type _SerializerRep<T> = Option<T>;

        impl Serializer{
          /// Creates a new resource from the specified representation.
          ///
          /// This function will create a new resource handle by moving `val` onto
          /// the heap and then passing that heap pointer to the component model to
          /// create a handle. The owned handle is then returned as `Serializer`.
          pub fn new<T: GuestSerializer>(val: T) -> Self {
            Self::type_guard::<T>();
            let val: _SerializerRep<T> = Some(val);
            let ptr: *mut _SerializerRep<T> =
            _rt::Box::into_raw(_rt::Box::new(val));
            unsafe {
              Self::from_handle(T::_resource_new(ptr.cast()))
            }
          }

          /// Gets access to the underlying `T` which represents this resource.
          pub fn get<T: GuestSerializer>(&self) -> &T {
            let ptr = unsafe { &*self.as_ptr::<T>() };
            ptr.as_ref().unwrap()
          }

          /// Gets mutable access to the underlying `T` which represents this
          /// resource.
          pub fn get_mut<T: GuestSerializer>(&mut self) -> &mut T {
            let ptr = unsafe { &mut *self.as_ptr::<T>() };
            ptr.as_mut().unwrap()
          }

          /// Consumes this resource and returns the underlying `T`.
          pub fn into_inner<T: GuestSerializer>(self) -> T {
            let ptr = unsafe { &mut *self.as_ptr::<T>() };
            ptr.take().unwrap()
          }

          #[doc(hidden)]
          pub unsafe fn from_handle(handle: u32) -> Self {
            Self {
              handle: _rt::Resource::from_handle(handle),
            }
          }

          #[doc(hidden)]
          pub fn take_handle(&self) -> u32 {
            _rt::Resource::take_handle(&self.handle)
          }

          #[doc(hidden)]
          pub fn handle(&self) -> u32 {
            _rt::Resource::handle(&self.handle)
          }

          // It's theoretically possible to implement the `GuestSerializer` trait twice
          // so guard against using it with two different types here.
          #[doc(hidden)]
          fn type_guard<T: 'static>() {
            use core::any::TypeId;
            static mut LAST_TYPE: Option<TypeId> = None;
            unsafe {
              assert!(!cfg!(target_feature = "threads"));
              let id = TypeId::of::<T>();
              match LAST_TYPE {
                Some(ty) => assert!(ty == id, "cannot use two types with this resource type"),
                None => LAST_TYPE = Some(id),
              }
            }
          }

          #[doc(hidden)]
          pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
            Self::type_guard::<T>();
            let _ = _rt::Box::from_raw(handle as *mut _SerializerRep<T>);
          }

          fn as_ptr<T: GuestSerializer>(&self) -> *mut _SerializerRep<T> {
            Serializer::type_guard::<T>();
            T::_resource_rep(self.handle()).cast()
          }
        }

        /// A borrowed version of [`Serializer`] which represents a borrowed value
        /// with the lifetime `'a`.
        #[derive(Debug)]
        #[repr(transparent)]
        pub struct SerializerBorrow<'a> {
          rep: *mut u8,
          _marker: core::marker::PhantomData<&'a Serializer>,
        }

        impl<'a> SerializerBorrow<'a>{
          #[doc(hidden)]
          pub unsafe fn lift(rep: usize) -> Self {
            Self {
              rep: rep as *mut u8,
              _marker: core::marker::PhantomData,
            }
          }

          /// Gets access to the underlying `T` in this resource.
          pub fn get<T: GuestSerializer>(&self) -> &T {
            let ptr = unsafe { &mut *self.as_ptr::<T>() };
            ptr.as_ref().unwrap()
          }

          // NB: mutable access is not allowed due to the component model allowing
          // multiple borrows of the same resource.

          fn as_ptr<T: 'static>(&self) -> *mut _SerializerRep<T> {
            Serializer::type_guard::<T>();
            self.rep.cast()
          }
        }


        unsafe impl _rt::WasmResource for Serializer{
          #[inline]
          unsafe fn drop(_handle: u32) {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();

            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]wasi:serde/serialize@0.2.0")]
              extern "C" {
                #[link_name = "[resource-drop]serializer"]
                fn drop(_: u32);
              }

              drop(_handle);
            }
          }
        }

        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_method_serializer_serialize_s8_cabi<T: GuestSerializer>(arg0: *mut u8,arg1: i32,) -> *mut u8 {#[cfg(target_arch="wasm32")]
        _rt::run_ctors_once();let result0 = T::serialize_s8(SerializerBorrow::lift(arg0 as u32 as usize).get(), arg1 as i8);
        let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
        match result0 {
          Ok(_) => { {
            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
          } },
          Err(e) => { {
            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
            use super::super::super::super::exports::wasi::serde::errors::SerializeError as V4;
            match e {
              V4::Custom(e) => {
                *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                let super::super::super::super::exports::wasi::serde::errors::CustomError{ message:message2, } = e;
                let vec3 = (message2.into_bytes()).into_boxed_slice();
                let ptr3 = vec3.as_ptr().cast::<u8>();
                let len3 = vec3.len();
                ::core::mem::forget(vec3);
                *ptr1.add(12).cast::<usize>() = len3;
                *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
              },
            }
          } },
        };ptr1
      }
      #[doc(hidden)]
      #[allow(non_snake_case)]
      pub unsafe fn __post_return_method_serializer_serialize_s8<T: GuestSerializer>(arg0: *mut u8,) {
        let l0 = i32::from(*arg0.add(0).cast::<u8>());
        match l0 {
          0 => (),
          _ => {
            let l1 = i32::from(*arg0.add(4).cast::<u8>());
            match l1 {
              _ => {
                let l2 = *arg0.add(8).cast::<*mut u8>();
                let l3 = *arg0.add(12).cast::<usize>();
                _rt::cabi_dealloc(l2, l3, 1);
              },
            }
          },
        }
      }
      #[doc(hidden)]
      #[allow(non_snake_case)]
      pub unsafe fn _export_method_serializer_serialize_s16_cabi<T: GuestSerializer>(arg0: *mut u8,arg1: i32,) -> *mut u8 {#[cfg(target_arch="wasm32")]
      _rt::run_ctors_once();let result0 = T::serialize_s16(SerializerBorrow::lift(arg0 as u32 as usize).get(), arg1 as i16);
      let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
      match result0 {
        Ok(_) => { {
          *ptr1.add(0).cast::<u8>() = (0i32) as u8;
        } },
        Err(e) => { {
          *ptr1.add(0).cast::<u8>() = (1i32) as u8;
          use super::super::super::super::exports::wasi::serde::errors::SerializeError as V4;
          match e {
            V4::Custom(e) => {
              *ptr1.add(4).cast::<u8>() = (0i32) as u8;
              let super::super::super::super::exports::wasi::serde::errors::CustomError{ message:message2, } = e;
              let vec3 = (message2.into_bytes()).into_boxed_slice();
              let ptr3 = vec3.as_ptr().cast::<u8>();
              let len3 = vec3.len();
              ::core::mem::forget(vec3);
              *ptr1.add(12).cast::<usize>() = len3;
              *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
            },
          }
        } },
      };ptr1
    }
    #[doc(hidden)]
    #[allow(non_snake_case)]
    pub unsafe fn __post_return_method_serializer_serialize_s16<T: GuestSerializer>(arg0: *mut u8,) {
      let l0 = i32::from(*arg0.add(0).cast::<u8>());
      match l0 {
        0 => (),
        _ => {
          let l1 = i32::from(*arg0.add(4).cast::<u8>());
          match l1 {
            _ => {
              let l2 = *arg0.add(8).cast::<*mut u8>();
              let l3 = *arg0.add(12).cast::<usize>();
              _rt::cabi_dealloc(l2, l3, 1);
            },
          }
        },
      }
    }
    #[doc(hidden)]
    #[allow(non_snake_case)]
    pub unsafe fn _export_method_serializer_serialize_s32_cabi<T: GuestSerializer>(arg0: *mut u8,arg1: i32,) -> *mut u8 {#[cfg(target_arch="wasm32")]
    _rt::run_ctors_once();let result0 = T::serialize_s32(SerializerBorrow::lift(arg0 as u32 as usize).get(), arg1);
    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    match result0 {
      Ok(_) => { {
        *ptr1.add(0).cast::<u8>() = (0i32) as u8;
      } },
      Err(e) => { {
        *ptr1.add(0).cast::<u8>() = (1i32) as u8;
        use super::super::super::super::exports::wasi::serde::errors::SerializeError as V4;
        match e {
          V4::Custom(e) => {
            *ptr1.add(4).cast::<u8>() = (0i32) as u8;
            let super::super::super::super::exports::wasi::serde::errors::CustomError{ message:message2, } = e;
            let vec3 = (message2.into_bytes()).into_boxed_slice();
            let ptr3 = vec3.as_ptr().cast::<u8>();
            let len3 = vec3.len();
            ::core::mem::forget(vec3);
            *ptr1.add(12).cast::<usize>() = len3;
            *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
          },
        }
      } },
    };ptr1
  }
  #[doc(hidden)]
  #[allow(non_snake_case)]
  pub unsafe fn __post_return_method_serializer_serialize_s32<T: GuestSerializer>(arg0: *mut u8,) {
    let l0 = i32::from(*arg0.add(0).cast::<u8>());
    match l0 {
      0 => (),
      _ => {
        let l1 = i32::from(*arg0.add(4).cast::<u8>());
        match l1 {
          _ => {
            let l2 = *arg0.add(8).cast::<*mut u8>();
            let l3 = *arg0.add(12).cast::<usize>();
            _rt::cabi_dealloc(l2, l3, 1);
          },
        }
      },
    }
  }
  #[doc(hidden)]
  #[allow(non_snake_case)]
  pub unsafe fn _export_method_serializer_serialize_s64_cabi<T: GuestSerializer>(arg0: *mut u8,arg1: i64,) -> *mut u8 {#[cfg(target_arch="wasm32")]
  _rt::run_ctors_once();let result0 = T::serialize_s64(SerializerBorrow::lift(arg0 as u32 as usize).get(), arg1);
  let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
  match result0 {
    Ok(_) => { {
      *ptr1.add(0).cast::<u8>() = (0i32) as u8;
    } },
    Err(e) => { {
      *ptr1.add(0).cast::<u8>() = (1i32) as u8;
      use super::super::super::super::exports::wasi::serde::errors::SerializeError as V4;
      match e {
        V4::Custom(e) => {
          *ptr1.add(4).cast::<u8>() = (0i32) as u8;
          let super::super::super::super::exports::wasi::serde::errors::CustomError{ message:message2, } = e;
          let vec3 = (message2.into_bytes()).into_boxed_slice();
          let ptr3 = vec3.as_ptr().cast::<u8>();
          let len3 = vec3.len();
          ::core::mem::forget(vec3);
          *ptr1.add(12).cast::<usize>() = len3;
          *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
        },
      }
    } },
  };ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_serializer_serialize_s64<T: GuestSerializer>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = i32::from(*arg0.add(4).cast::<u8>());
      match l1 {
        _ => {
          let l2 = *arg0.add(8).cast::<*mut u8>();
          let l3 = *arg0.add(12).cast::<usize>();
          _rt::cabi_dealloc(l2, l3, 1);
        },
      }
    },
  }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_serializer_serialize_u8_cabi<T: GuestSerializer>(arg0: *mut u8,arg1: i32,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::serialize_u8(SerializerBorrow::lift(arg0 as u32 as usize).get(), arg1 as u8);
let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
match result0 {
  Ok(_) => { {
    *ptr1.add(0).cast::<u8>() = (0i32) as u8;
  } },
  Err(e) => { {
    *ptr1.add(0).cast::<u8>() = (1i32) as u8;
    use super::super::super::super::exports::wasi::serde::errors::SerializeError as V4;
    match e {
      V4::Custom(e) => {
        *ptr1.add(4).cast::<u8>() = (0i32) as u8;
        let super::super::super::super::exports::wasi::serde::errors::CustomError{ message:message2, } = e;
        let vec3 = (message2.into_bytes()).into_boxed_slice();
        let ptr3 = vec3.as_ptr().cast::<u8>();
        let len3 = vec3.len();
        ::core::mem::forget(vec3);
        *ptr1.add(12).cast::<usize>() = len3;
        *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
      },
    }
  } },
};ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_serializer_serialize_u8<T: GuestSerializer>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = i32::from(*arg0.add(4).cast::<u8>());
      match l1 {
        _ => {
          let l2 = *arg0.add(8).cast::<*mut u8>();
          let l3 = *arg0.add(12).cast::<usize>();
          _rt::cabi_dealloc(l2, l3, 1);
        },
      }
    },
  }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_serializer_serialize_u16_cabi<T: GuestSerializer>(arg0: *mut u8,arg1: i32,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::serialize_u16(SerializerBorrow::lift(arg0 as u32 as usize).get(), arg1 as u16);
let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
match result0 {
  Ok(_) => { {
    *ptr1.add(0).cast::<u8>() = (0i32) as u8;
  } },
  Err(e) => { {
    *ptr1.add(0).cast::<u8>() = (1i32) as u8;
    use super::super::super::super::exports::wasi::serde::errors::SerializeError as V4;
    match e {
      V4::Custom(e) => {
        *ptr1.add(4).cast::<u8>() = (0i32) as u8;
        let super::super::super::super::exports::wasi::serde::errors::CustomError{ message:message2, } = e;
        let vec3 = (message2.into_bytes()).into_boxed_slice();
        let ptr3 = vec3.as_ptr().cast::<u8>();
        let len3 = vec3.len();
        ::core::mem::forget(vec3);
        *ptr1.add(12).cast::<usize>() = len3;
        *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
      },
    }
  } },
};ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_serializer_serialize_u16<T: GuestSerializer>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = i32::from(*arg0.add(4).cast::<u8>());
      match l1 {
        _ => {
          let l2 = *arg0.add(8).cast::<*mut u8>();
          let l3 = *arg0.add(12).cast::<usize>();
          _rt::cabi_dealloc(l2, l3, 1);
        },
      }
    },
  }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_serializer_serialize_u32_cabi<T: GuestSerializer>(arg0: *mut u8,arg1: i32,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::serialize_u32(SerializerBorrow::lift(arg0 as u32 as usize).get(), arg1 as u32);
let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
match result0 {
  Ok(_) => { {
    *ptr1.add(0).cast::<u8>() = (0i32) as u8;
  } },
  Err(e) => { {
    *ptr1.add(0).cast::<u8>() = (1i32) as u8;
    use super::super::super::super::exports::wasi::serde::errors::SerializeError as V4;
    match e {
      V4::Custom(e) => {
        *ptr1.add(4).cast::<u8>() = (0i32) as u8;
        let super::super::super::super::exports::wasi::serde::errors::CustomError{ message:message2, } = e;
        let vec3 = (message2.into_bytes()).into_boxed_slice();
        let ptr3 = vec3.as_ptr().cast::<u8>();
        let len3 = vec3.len();
        ::core::mem::forget(vec3);
        *ptr1.add(12).cast::<usize>() = len3;
        *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
      },
    }
  } },
};ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_serializer_serialize_u32<T: GuestSerializer>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = i32::from(*arg0.add(4).cast::<u8>());
      match l1 {
        _ => {
          let l2 = *arg0.add(8).cast::<*mut u8>();
          let l3 = *arg0.add(12).cast::<usize>();
          _rt::cabi_dealloc(l2, l3, 1);
        },
      }
    },
  }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_serializer_serialize_u64_cabi<T: GuestSerializer>(arg0: *mut u8,arg1: i64,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::serialize_u64(SerializerBorrow::lift(arg0 as u32 as usize).get(), arg1 as u64);
let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
match result0 {
  Ok(_) => { {
    *ptr1.add(0).cast::<u8>() = (0i32) as u8;
  } },
  Err(e) => { {
    *ptr1.add(0).cast::<u8>() = (1i32) as u8;
    use super::super::super::super::exports::wasi::serde::errors::SerializeError as V4;
    match e {
      V4::Custom(e) => {
        *ptr1.add(4).cast::<u8>() = (0i32) as u8;
        let super::super::super::super::exports::wasi::serde::errors::CustomError{ message:message2, } = e;
        let vec3 = (message2.into_bytes()).into_boxed_slice();
        let ptr3 = vec3.as_ptr().cast::<u8>();
        let len3 = vec3.len();
        ::core::mem::forget(vec3);
        *ptr1.add(12).cast::<usize>() = len3;
        *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
      },
    }
  } },
};ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_serializer_serialize_u64<T: GuestSerializer>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = i32::from(*arg0.add(4).cast::<u8>());
      match l1 {
        _ => {
          let l2 = *arg0.add(8).cast::<*mut u8>();
          let l3 = *arg0.add(12).cast::<usize>();
          _rt::cabi_dealloc(l2, l3, 1);
        },
      }
    },
  }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_serializer_serialize_f32_cabi<T: GuestSerializer>(arg0: *mut u8,arg1: f32,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::serialize_f32(SerializerBorrow::lift(arg0 as u32 as usize).get(), arg1);
let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
match result0 {
  Ok(_) => { {
    *ptr1.add(0).cast::<u8>() = (0i32) as u8;
  } },
  Err(e) => { {
    *ptr1.add(0).cast::<u8>() = (1i32) as u8;
    use super::super::super::super::exports::wasi::serde::errors::SerializeError as V4;
    match e {
      V4::Custom(e) => {
        *ptr1.add(4).cast::<u8>() = (0i32) as u8;
        let super::super::super::super::exports::wasi::serde::errors::CustomError{ message:message2, } = e;
        let vec3 = (message2.into_bytes()).into_boxed_slice();
        let ptr3 = vec3.as_ptr().cast::<u8>();
        let len3 = vec3.len();
        ::core::mem::forget(vec3);
        *ptr1.add(12).cast::<usize>() = len3;
        *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
      },
    }
  } },
};ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_serializer_serialize_f32<T: GuestSerializer>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = i32::from(*arg0.add(4).cast::<u8>());
      match l1 {
        _ => {
          let l2 = *arg0.add(8).cast::<*mut u8>();
          let l3 = *arg0.add(12).cast::<usize>();
          _rt::cabi_dealloc(l2, l3, 1);
        },
      }
    },
  }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_serializer_serialize_f64_cabi<T: GuestSerializer>(arg0: *mut u8,arg1: f64,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::serialize_f64(SerializerBorrow::lift(arg0 as u32 as usize).get(), arg1);
let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
match result0 {
  Ok(_) => { {
    *ptr1.add(0).cast::<u8>() = (0i32) as u8;
  } },
  Err(e) => { {
    *ptr1.add(0).cast::<u8>() = (1i32) as u8;
    use super::super::super::super::exports::wasi::serde::errors::SerializeError as V4;
    match e {
      V4::Custom(e) => {
        *ptr1.add(4).cast::<u8>() = (0i32) as u8;
        let super::super::super::super::exports::wasi::serde::errors::CustomError{ message:message2, } = e;
        let vec3 = (message2.into_bytes()).into_boxed_slice();
        let ptr3 = vec3.as_ptr().cast::<u8>();
        let len3 = vec3.len();
        ::core::mem::forget(vec3);
        *ptr1.add(12).cast::<usize>() = len3;
        *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
      },
    }
  } },
};ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_serializer_serialize_f64<T: GuestSerializer>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = i32::from(*arg0.add(4).cast::<u8>());
      match l1 {
        _ => {
          let l2 = *arg0.add(8).cast::<*mut u8>();
          let l3 = *arg0.add(12).cast::<usize>();
          _rt::cabi_dealloc(l2, l3, 1);
        },
      }
    },
  }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_serializer_serialize_bool_cabi<T: GuestSerializer>(arg0: *mut u8,arg1: i32,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::serialize_bool(SerializerBorrow::lift(arg0 as u32 as usize).get(), _rt::bool_lift(arg1 as u8));
let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
match result0 {
  Ok(_) => { {
    *ptr1.add(0).cast::<u8>() = (0i32) as u8;
  } },
  Err(e) => { {
    *ptr1.add(0).cast::<u8>() = (1i32) as u8;
    use super::super::super::super::exports::wasi::serde::errors::SerializeError as V4;
    match e {
      V4::Custom(e) => {
        *ptr1.add(4).cast::<u8>() = (0i32) as u8;
        let super::super::super::super::exports::wasi::serde::errors::CustomError{ message:message2, } = e;
        let vec3 = (message2.into_bytes()).into_boxed_slice();
        let ptr3 = vec3.as_ptr().cast::<u8>();
        let len3 = vec3.len();
        ::core::mem::forget(vec3);
        *ptr1.add(12).cast::<usize>() = len3;
        *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
      },
    }
  } },
};ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_serializer_serialize_bool<T: GuestSerializer>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = i32::from(*arg0.add(4).cast::<u8>());
      match l1 {
        _ => {
          let l2 = *arg0.add(8).cast::<*mut u8>();
          let l3 = *arg0.add(12).cast::<usize>();
          _rt::cabi_dealloc(l2, l3, 1);
        },
      }
    },
  }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_serializer_serialize_char_cabi<T: GuestSerializer>(arg0: *mut u8,arg1: i32,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::serialize_char(SerializerBorrow::lift(arg0 as u32 as usize).get(), _rt::char_lift(arg1 as u32));
let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
match result0 {
  Ok(_) => { {
    *ptr1.add(0).cast::<u8>() = (0i32) as u8;
  } },
  Err(e) => { {
    *ptr1.add(0).cast::<u8>() = (1i32) as u8;
    use super::super::super::super::exports::wasi::serde::errors::SerializeError as V4;
    match e {
      V4::Custom(e) => {
        *ptr1.add(4).cast::<u8>() = (0i32) as u8;
        let super::super::super::super::exports::wasi::serde::errors::CustomError{ message:message2, } = e;
        let vec3 = (message2.into_bytes()).into_boxed_slice();
        let ptr3 = vec3.as_ptr().cast::<u8>();
        let len3 = vec3.len();
        ::core::mem::forget(vec3);
        *ptr1.add(12).cast::<usize>() = len3;
        *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
      },
    }
  } },
};ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_serializer_serialize_char<T: GuestSerializer>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = i32::from(*arg0.add(4).cast::<u8>());
      match l1 {
        _ => {
          let l2 = *arg0.add(8).cast::<*mut u8>();
          let l3 = *arg0.add(12).cast::<usize>();
          _rt::cabi_dealloc(l2, l3, 1);
        },
      }
    },
  }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_serializer_serialize_bytes_cabi<T: GuestSerializer>(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let len0 = arg2;
let result1 = T::serialize_bytes(SerializerBorrow::lift(arg0 as u32 as usize).get(), _rt::Vec::from_raw_parts(arg1.cast(), len0, len0));
let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
match result1 {
  Ok(_) => { {
    *ptr2.add(0).cast::<u8>() = (0i32) as u8;
  } },
  Err(e) => { {
    *ptr2.add(0).cast::<u8>() = (1i32) as u8;
    use super::super::super::super::exports::wasi::serde::errors::SerializeError as V5;
    match e {
      V5::Custom(e) => {
        *ptr2.add(4).cast::<u8>() = (0i32) as u8;
        let super::super::super::super::exports::wasi::serde::errors::CustomError{ message:message3, } = e;
        let vec4 = (message3.into_bytes()).into_boxed_slice();
        let ptr4 = vec4.as_ptr().cast::<u8>();
        let len4 = vec4.len();
        ::core::mem::forget(vec4);
        *ptr2.add(12).cast::<usize>() = len4;
        *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
      },
    }
  } },
};ptr2
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_serializer_serialize_bytes<T: GuestSerializer>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = i32::from(*arg0.add(4).cast::<u8>());
      match l1 {
        _ => {
          let l2 = *arg0.add(8).cast::<*mut u8>();
          let l3 = *arg0.add(12).cast::<usize>();
          _rt::cabi_dealloc(l2, l3, 1);
        },
      }
    },
  }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_serializer_serialize_string_cabi<T: GuestSerializer>(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let len0 = arg2;
let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
let result1 = T::serialize_string(SerializerBorrow::lift(arg0 as u32 as usize).get(), _rt::string_lift(bytes0));
let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
match result1 {
  Ok(_) => { {
    *ptr2.add(0).cast::<u8>() = (0i32) as u8;
  } },
  Err(e) => { {
    *ptr2.add(0).cast::<u8>() = (1i32) as u8;
    use super::super::super::super::exports::wasi::serde::errors::SerializeError as V5;
    match e {
      V5::Custom(e) => {
        *ptr2.add(4).cast::<u8>() = (0i32) as u8;
        let super::super::super::super::exports::wasi::serde::errors::CustomError{ message:message3, } = e;
        let vec4 = (message3.into_bytes()).into_boxed_slice();
        let ptr4 = vec4.as_ptr().cast::<u8>();
        let len4 = vec4.len();
        ::core::mem::forget(vec4);
        *ptr2.add(12).cast::<usize>() = len4;
        *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
      },
    }
  } },
};ptr2
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_serializer_serialize_string<T: GuestSerializer>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = i32::from(*arg0.add(4).cast::<u8>());
      match l1 {
        _ => {
          let l2 = *arg0.add(8).cast::<*mut u8>();
          let l3 = *arg0.add(12).cast::<usize>();
          _rt::cabi_dealloc(l2, l3, 1);
        },
      }
    },
  }
}
pub trait Guest {
  type Serializer: GuestSerializer;
}
pub trait GuestSerializer: 'static {

  #[doc(hidden)]
  unsafe fn _resource_new(val: *mut u8) -> u32
  where Self: Sized
  {
    #[cfg(not(target_arch = "wasm32"))]
    {
      let _ = val;
      unreachable!();
    }

    #[cfg(target_arch = "wasm32")]
    {
      #[link(wasm_import_module = "[export]wasi:serde/serialize@0.2.0")]
      extern "C" {
        #[link_name = "[resource-new]serializer"]
        fn new(_: *mut u8) -> u32;
      }
      new(val)
    }
  }

  #[doc(hidden)]
  fn _resource_rep(handle: u32) -> *mut u8
  where Self: Sized
  {
    #[cfg(not(target_arch = "wasm32"))]
    {
      let _ = handle;
      unreachable!();
    }

    #[cfg(target_arch = "wasm32")]
    {
      #[link(wasm_import_module = "[export]wasi:serde/serialize@0.2.0")]
      extern "C" {
        #[link_name = "[resource-rep]serializer"]
        fn rep(_: u32) -> *mut u8;
      }
      unsafe {
        rep(handle)
      }
    }
  }

  
  fn serialize_s8(&self,value: i8,) -> Result<(),SerializeError>;
  fn serialize_s16(&self,value: i16,) -> Result<(),SerializeError>;
  fn serialize_s32(&self,value: i32,) -> Result<(),SerializeError>;
  fn serialize_s64(&self,value: i64,) -> Result<(),SerializeError>;
  fn serialize_u8(&self,value: u8,) -> Result<(),SerializeError>;
  fn serialize_u16(&self,value: u16,) -> Result<(),SerializeError>;
  fn serialize_u32(&self,value: u32,) -> Result<(),SerializeError>;
  fn serialize_u64(&self,value: u64,) -> Result<(),SerializeError>;
  fn serialize_f32(&self,value: f32,) -> Result<(),SerializeError>;
  fn serialize_f64(&self,value: f64,) -> Result<(),SerializeError>;
  fn serialize_bool(&self,value: bool,) -> Result<(),SerializeError>;
  fn serialize_char(&self,value: char,) -> Result<(),SerializeError>;
  fn serialize_bytes(&self,value: _rt::Vec::<u8>,) -> Result<(),SerializeError>;
  fn serialize_string(&self,value: _rt::String,) -> Result<(),SerializeError>;
}
#[doc(hidden)]

macro_rules! __export_wasi_serde_serialize_0_2_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "wasi:serde/serialize@0.2.0#[method]serializer.serialize-s8"]
    unsafe extern "C" fn export_method_serializer_serialize_s8(arg0: *mut u8,arg1: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_serializer_serialize_s8_cabi::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0, arg1)
    }
    #[export_name = "cabi_post_wasi:serde/serialize@0.2.0#[method]serializer.serialize-s8"]
    unsafe extern "C" fn _post_return_method_serializer_serialize_s8(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_serializer_serialize_s8::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0)
    }
    #[export_name = "wasi:serde/serialize@0.2.0#[method]serializer.serialize-s16"]
    unsafe extern "C" fn export_method_serializer_serialize_s16(arg0: *mut u8,arg1: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_serializer_serialize_s16_cabi::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0, arg1)
    }
    #[export_name = "cabi_post_wasi:serde/serialize@0.2.0#[method]serializer.serialize-s16"]
    unsafe extern "C" fn _post_return_method_serializer_serialize_s16(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_serializer_serialize_s16::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0)
    }
    #[export_name = "wasi:serde/serialize@0.2.0#[method]serializer.serialize-s32"]
    unsafe extern "C" fn export_method_serializer_serialize_s32(arg0: *mut u8,arg1: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_serializer_serialize_s32_cabi::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0, arg1)
    }
    #[export_name = "cabi_post_wasi:serde/serialize@0.2.0#[method]serializer.serialize-s32"]
    unsafe extern "C" fn _post_return_method_serializer_serialize_s32(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_serializer_serialize_s32::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0)
    }
    #[export_name = "wasi:serde/serialize@0.2.0#[method]serializer.serialize-s64"]
    unsafe extern "C" fn export_method_serializer_serialize_s64(arg0: *mut u8,arg1: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_serializer_serialize_s64_cabi::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0, arg1)
    }
    #[export_name = "cabi_post_wasi:serde/serialize@0.2.0#[method]serializer.serialize-s64"]
    unsafe extern "C" fn _post_return_method_serializer_serialize_s64(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_serializer_serialize_s64::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0)
    }
    #[export_name = "wasi:serde/serialize@0.2.0#[method]serializer.serialize-u8"]
    unsafe extern "C" fn export_method_serializer_serialize_u8(arg0: *mut u8,arg1: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_serializer_serialize_u8_cabi::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0, arg1)
    }
    #[export_name = "cabi_post_wasi:serde/serialize@0.2.0#[method]serializer.serialize-u8"]
    unsafe extern "C" fn _post_return_method_serializer_serialize_u8(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_serializer_serialize_u8::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0)
    }
    #[export_name = "wasi:serde/serialize@0.2.0#[method]serializer.serialize-u16"]
    unsafe extern "C" fn export_method_serializer_serialize_u16(arg0: *mut u8,arg1: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_serializer_serialize_u16_cabi::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0, arg1)
    }
    #[export_name = "cabi_post_wasi:serde/serialize@0.2.0#[method]serializer.serialize-u16"]
    unsafe extern "C" fn _post_return_method_serializer_serialize_u16(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_serializer_serialize_u16::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0)
    }
    #[export_name = "wasi:serde/serialize@0.2.0#[method]serializer.serialize-u32"]
    unsafe extern "C" fn export_method_serializer_serialize_u32(arg0: *mut u8,arg1: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_serializer_serialize_u32_cabi::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0, arg1)
    }
    #[export_name = "cabi_post_wasi:serde/serialize@0.2.0#[method]serializer.serialize-u32"]
    unsafe extern "C" fn _post_return_method_serializer_serialize_u32(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_serializer_serialize_u32::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0)
    }
    #[export_name = "wasi:serde/serialize@0.2.0#[method]serializer.serialize-u64"]
    unsafe extern "C" fn export_method_serializer_serialize_u64(arg0: *mut u8,arg1: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_serializer_serialize_u64_cabi::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0, arg1)
    }
    #[export_name = "cabi_post_wasi:serde/serialize@0.2.0#[method]serializer.serialize-u64"]
    unsafe extern "C" fn _post_return_method_serializer_serialize_u64(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_serializer_serialize_u64::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0)
    }
    #[export_name = "wasi:serde/serialize@0.2.0#[method]serializer.serialize-f32"]
    unsafe extern "C" fn export_method_serializer_serialize_f32(arg0: *mut u8,arg1: f32,) -> *mut u8 {
      $($path_to_types)*::_export_method_serializer_serialize_f32_cabi::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0, arg1)
    }
    #[export_name = "cabi_post_wasi:serde/serialize@0.2.0#[method]serializer.serialize-f32"]
    unsafe extern "C" fn _post_return_method_serializer_serialize_f32(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_serializer_serialize_f32::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0)
    }
    #[export_name = "wasi:serde/serialize@0.2.0#[method]serializer.serialize-f64"]
    unsafe extern "C" fn export_method_serializer_serialize_f64(arg0: *mut u8,arg1: f64,) -> *mut u8 {
      $($path_to_types)*::_export_method_serializer_serialize_f64_cabi::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0, arg1)
    }
    #[export_name = "cabi_post_wasi:serde/serialize@0.2.0#[method]serializer.serialize-f64"]
    unsafe extern "C" fn _post_return_method_serializer_serialize_f64(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_serializer_serialize_f64::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0)
    }
    #[export_name = "wasi:serde/serialize@0.2.0#[method]serializer.serialize-bool"]
    unsafe extern "C" fn export_method_serializer_serialize_bool(arg0: *mut u8,arg1: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_serializer_serialize_bool_cabi::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0, arg1)
    }
    #[export_name = "cabi_post_wasi:serde/serialize@0.2.0#[method]serializer.serialize-bool"]
    unsafe extern "C" fn _post_return_method_serializer_serialize_bool(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_serializer_serialize_bool::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0)
    }
    #[export_name = "wasi:serde/serialize@0.2.0#[method]serializer.serialize-char"]
    unsafe extern "C" fn export_method_serializer_serialize_char(arg0: *mut u8,arg1: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_serializer_serialize_char_cabi::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0, arg1)
    }
    #[export_name = "cabi_post_wasi:serde/serialize@0.2.0#[method]serializer.serialize-char"]
    unsafe extern "C" fn _post_return_method_serializer_serialize_char(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_serializer_serialize_char::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0)
    }
    #[export_name = "wasi:serde/serialize@0.2.0#[method]serializer.serialize-bytes"]
    unsafe extern "C" fn export_method_serializer_serialize_bytes(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_serializer_serialize_bytes_cabi::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0, arg1, arg2)
    }
    #[export_name = "cabi_post_wasi:serde/serialize@0.2.0#[method]serializer.serialize-bytes"]
    unsafe extern "C" fn _post_return_method_serializer_serialize_bytes(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_serializer_serialize_bytes::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0)
    }
    #[export_name = "wasi:serde/serialize@0.2.0#[method]serializer.serialize-string"]
    unsafe extern "C" fn export_method_serializer_serialize_string(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_serializer_serialize_string_cabi::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0, arg1, arg2)
    }
    #[export_name = "cabi_post_wasi:serde/serialize@0.2.0#[method]serializer.serialize-string"]
    unsafe extern "C" fn _post_return_method_serializer_serialize_string(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_serializer_serialize_string::<<$ty as $($path_to_types)*::Guest>::Serializer>(arg0)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "wasi:serde/serialize@0.2.0#[dtor]serializer"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::Serializer::dtor::<
        <$ty as $($path_to_types)*::Guest>::Serializer
        >(rep)
      }
    };
    
  };);
}
#[doc(hidden)]
pub(crate) use __export_wasi_serde_serialize_0_2_0_cabi;
#[repr(align(4))]
struct _RetArea([::core::mem::MaybeUninit::<u8>; 16]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);

}

}
}
}
mod _rt {
  pub use alloc_crate::string::String;


  use core::fmt;
  use core::marker;
  use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

  /// A type which represents a component model resource, either imported or
  /// exported into this component.
  ///
  /// This is a low-level wrapper which handles the lifetime of the resource
  /// (namely this has a destructor). The `T` provided defines the component model
  /// intrinsics that this wrapper uses.
  ///
  /// One of the chief purposes of this type is to provide `Deref` implementations
  /// to access the underlying data when it is owned.
  ///
  /// This type is primarily used in generated code for exported and imported
  /// resources.
  #[repr(transparent)]
  pub struct Resource<T: WasmResource> {
    // NB: This would ideally be `u32` but it is not. The fact that this has
    // interior mutability is not exposed in the API of this type except for the
    // `take_handle` method which is supposed to in theory be private.
    //
    // This represents, almost all the time, a valid handle value. When it's
    // invalid it's stored as `u32::MAX`.
    handle: AtomicU32,
    _marker: marker::PhantomData<T>,
  }

  /// A trait which all wasm resources implement, namely providing the ability to
  /// drop a resource.
  ///
  /// This generally is implemented by generated code, not user-facing code.
  pub unsafe trait WasmResource {
    /// Invokes the `[resource-drop]...` intrinsic.
    unsafe fn drop(handle: u32);
  }

  impl<T: WasmResource> Resource<T> {
    #[doc(hidden)]
    pub unsafe fn from_handle(handle: u32) -> Self {
      debug_assert!(handle != u32::MAX);
      Self {
        handle: AtomicU32::new(handle),
        _marker: marker::PhantomData,
      }
    }

    /// Takes ownership of the handle owned by `resource`.
    ///
    /// Note that this ideally would be `into_handle` taking `Resource<T>` by
    /// ownership. The code generator does not enable that in all situations,
    /// unfortunately, so this is provided instead.
    ///
    /// Also note that `take_handle` is in theory only ever called on values
    /// owned by a generated function. For example a generated function might
    /// take `Resource<T>` as an argument but then call `take_handle` on a
    /// reference to that argument. In that sense the dynamic nature of
    /// `take_handle` should only be exposed internally to generated code, not
    /// to user code.
    #[doc(hidden)]
    pub fn take_handle(resource: &Resource<T>) -> u32 {
      resource.handle.swap(u32::MAX, Relaxed)
    }

    #[doc(hidden)]
    pub fn handle(resource: &Resource<T>) -> u32 {
      resource.handle.load(Relaxed)
    }
  }

  impl<T: WasmResource> fmt::Debug for Resource<T> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      f.debug_struct("Resource")
      .field("handle", &self.handle)
      .finish()
    }
  }

  impl<T: WasmResource> Drop for Resource<T> {
    fn drop(&mut self) {
      unsafe {
        match self.handle.load(Relaxed) {
          // If this handle was "taken" then don't do anything in the
          // destructor.
          u32::MAX => {}

          // ... but otherwise do actually destroy it with the imported
          // component model intrinsic as defined through `T`.
          other => T::drop(other),
        }
      }
    }
  }
  pub use alloc_crate::boxed::Box;

  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen::rt::run_ctors_once();
  }
  pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
    if size == 0 {
      return;
    }
    let layout = alloc::Layout::from_size_align_unchecked(size, align);
    alloc::dealloc(ptr as *mut u8, layout);
  }
  pub unsafe fn bool_lift(val: u8) -> bool {
    if cfg!(debug_assertions) {
      match val {
        0 => false,
        1 => true,
        _ => panic!("invalid bool discriminant"),
      }
    } else {
      val != 0
    }
  }
  pub unsafe fn char_lift(val: u32) -> char {
    if cfg!(debug_assertions) {
      core::char::from_u32(val).unwrap()
    } else {
      core::char::from_u32_unchecked(val)
    }
  }
  pub use alloc_crate::vec::Vec;
  pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
    if cfg!(debug_assertions) {
      String::from_utf8(bytes).unwrap()
    } else {
      String::from_utf8_unchecked(bytes)
    }
  }
  extern crate alloc as alloc_crate;
  pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_imports_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::wasi::serde::errors::__export_wasi_serde_errors_0_2_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::serde::errors);
  $($path_to_types_root)*::exports::wasi::serde::serialize::__export_wasi_serde_serialize_0_2_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::serde::serialize);
  )
}
#[doc(inline)]
pub(crate) use __export_imports_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.24.0:imports:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1137] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xf3\x07\x01A\x02\x01\
A\x05\x01B\x04\x01r\x01\x07messages\x04\0\x0ccustom-error\x03\0\0\x01q\x01\x06cu\
stom\x01\x01\0\x04\0\x0fserialize-error\x03\0\x02\x04\x01\x17wasi:serde/errors@0\
.2.0\x05\0\x02\x03\0\0\x0fserialize-error\x01B\"\x02\x03\x02\x01\x01\x04\0\x0fse\
rialize-error\x03\0\0\x04\0\x0aserializer\x03\x01\x01h\x02\x01j\0\x01\x01\x01@\x02\
\x04self\x03\x05value~\0\x04\x04\0\x1f[method]serializer.serialize-s8\x01\x05\x01\
@\x02\x04self\x03\x05value|\0\x04\x04\0\x20[method]serializer.serialize-s16\x01\x06\
\x01@\x02\x04self\x03\x05valuez\0\x04\x04\0\x20[method]serializer.serialize-s32\x01\
\x07\x01@\x02\x04self\x03\x05valuex\0\x04\x04\0\x20[method]serializer.serialize-\
s64\x01\x08\x01@\x02\x04self\x03\x05value}\0\x04\x04\0\x1f[method]serializer.ser\
ialize-u8\x01\x09\x01@\x02\x04self\x03\x05value{\0\x04\x04\0\x20[method]serializ\
er.serialize-u16\x01\x0a\x01@\x02\x04self\x03\x05valuey\0\x04\x04\0\x20[method]s\
erializer.serialize-u32\x01\x0b\x01@\x02\x04self\x03\x05valuew\0\x04\x04\0\x20[m\
ethod]serializer.serialize-u64\x01\x0c\x01@\x02\x04self\x03\x05valuev\0\x04\x04\0\
\x20[method]serializer.serialize-f32\x01\x0d\x01@\x02\x04self\x03\x05valueu\0\x04\
\x04\0\x20[method]serializer.serialize-f64\x01\x0e\x01@\x02\x04self\x03\x05value\
\x7f\0\x04\x04\0![method]serializer.serialize-bool\x01\x0f\x01@\x02\x04self\x03\x05\
valuet\0\x04\x04\0![method]serializer.serialize-char\x01\x10\x01p}\x01@\x02\x04s\
elf\x03\x05value\x11\0\x04\x04\0\"[method]serializer.serialize-bytes\x01\x12\x01\
@\x02\x04self\x03\x05values\0\x04\x04\0#[method]serializer.serialize-string\x01\x13\
\x04\x01\x1awasi:serde/serialize@0.2.0\x05\x02\x04\x01\x18wasi:serde/imports@0.2\
.0\x04\0\x0b\x0d\x01\0\x07imports\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\
\x0dwit-component\x070.202.0\x10wit-bindgen-rust\x060.24.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

